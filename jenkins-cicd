pipeline {
    agent any

    stages {

        #git clone stage
        stage('git clone') {
            steps {
                git 'https://github.com/CloudSihmar/spring-boot-hello-world.git'
            }
        }
        
        #Create package using maven
        stage('package') {
            steps {
               sh 'mvn clean package'
            }
        }

        #Create image using docker
        stage('image-creation') {
            steps {
               sh 'docker build -t $IMAGE_NAME:$BUILD_NUMBER -f Dockerfile.v1 .'
            }
        }

        #push image to dockerhub
        stage('image-push') {
            steps {
               withCredentials([usernamePassword(credentialsId: 'dockerhub', passwordVariable: 'docker_password', usernameVariable: 'docker_username')]) {
                sh '''docker login -u $docker_username -p $docker_password
                      docker push $IMAGE_NAME:$BUILD_NUMBER'''
               }
            }
        }

        #delete the old container
        stage('delete-old-container') {
            steps {
               sshagent(['dockerhost']) {
                    sh 'ssh -o StrictHostKeyChecking=no root@sandeep "export CONTAINER_NAME=$CONTAINER_NAME; if [ \\"\\$(docker ps -aq -f name=\\$CONTAINER_NAME)\\" ]; then echo \\"Stopping and removing existing container...\\"; docker stop \\$CONTAINER_NAME; docker rm \\$CONTAINER_NAME; fi"'
                  }
            }
        }
        
      #deploy the container on remote machine  
      stage('deployment') {
            steps {
               sshagent(['dockerhost']) {
                 sh 'ssh -o StrictHostKeyChecking=no root@sandeep docker run -dt -P --name $CONTAINER_NAME $IMAGE_NAME:$BUILD_NUMBER'
                 }
            }
        }  
        
        
        
    }
}
